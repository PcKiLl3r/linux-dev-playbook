---
- name: Install dependencies
  ansible.builtin.package:
    name: "{{ gui_dependencies_packages }}"
    state: present
    use: "{{ pkg_mgr }}"

#- name: Add GUI Apps Repos
#  ansible.builtin.yum_repository:
#    name: brave-browser
#    description: Brave browser repo
#    baseurl: 'https://brave-browser-rpm-release.s3.brave.com/brave-browser.repo'
#
#- name: Enable Brave repo
#  community.general.dnf_config_manager:
#    name: brave-browser
#    state: enabled
#
#- name: Add rpm_key
#  ansible.builtin.rpm_key:
#    state: present
#
#- name: Add brave rpm key
#  ansible.builtin.rpm_key:
#    key: 'https://brave-browser-rpm-release.s3.brave.com/brave-core.asc'
#    state: present
#
#- name: update
#  ansible.builtin.pacman:
#    name: "*"
#    state: latest
#
- name: Install GUI software
  ansible.builtin.package:
    name: "{{ gui_software_packages }}"
    state: present
    use: "{{ pkg_mgr }}"

- name: Determine whether Flatpak applications are requested
  ansible.builtin.set_fact:
    gui_flatpak_requested: >-
      {{ install_mattermost | default(false) | bool }}

- name: Ensure Flatpak is installed when required
  ansible.builtin.package:
    name: "{{ flatpak_package | default('flatpak') }}"
    state: present
    use: "{{ pkg_mgr }}"
  when: gui_flatpak_requested | bool

- name: Ensure Flathub remote is configured when Flatpak apps are requested
  community.general.flatpak_remote:
    name: "{{ flatpak_remote_name | default('flathub') }}"
    state: present
    flatpakrepo_url: "{{ flatpak_remote_url | default('https://flathub.org/repo/flathub.flatpakrepo') }}"
  when: gui_flatpak_requested | bool

- name: Ensure Spotify LPF wrapper is installed (Fedora)
  ansible.builtin.package:
    name: "{{ spotify_lpf_wrapper_package }}"
    state: present
    use: "{{ pkg_mgr }}"
  when:
    - install_spotify | default(false) | bool
    - target_os == 'fedora'

- name: Ensure Spotify build groups exist (Fedora)
  ansible.builtin.group:
    name: "{{ item }}"
    state: present
    system: true
  loop: "{{ spotify_lpf_groups }}"
  when:
    - install_spotify | default(false) | bool
    - target_os == 'fedora'

- name: Ensure user is part of Spotify build groups (Fedora)
  ansible.builtin.user:
    name: "{{ username }}"
    groups: "{{ item }}"
    append: true
  loop: "{{ spotify_lpf_groups }}"
  when:
    - install_spotify | default(false) | bool
    - target_os == 'fedora'

- name: Gather package facts
  ansible.builtin.package_facts:
    manager: auto
  when: install_spotify | default(false) | bool

- name: Build and install Spotify via LPF (Fedora)
  ansible.builtin.command:
    cmd: "{{ spotify_lpf_command }}"
  become: true
  become_user: "{{ username }}"
  environment: "{{ spotify_lpf_environment }}"
  when:
    - install_spotify | default(false) | bool
    - target_os == 'fedora'
    - ansible_facts.packages is defined
    - spotify_package_name not in ansible_facts.packages

- name: Install Spotify via package manager
  ansible.builtin.package:
    name: "{{ spotify_package_name }}"
    state: present
    use: "{{ pkg_mgr }}"
  when:
    - install_spotify | default(false) | bool
    - target_os != 'fedora'

- name: Remove legacy Spotify Flatpak launcher
  ansible.builtin.file:
    path: /usr/local/bin/spotify
    state: absent
  when: install_spotify | default(false) | bool

- name: Ensure Obsidian repository GPG key is installed (Fedora)
  ansible.builtin.rpm_key:
    key: "{{ obsidian_repo_gpgkey }}"
    state: present
  when:
    - install_obsidian | default(false) | bool
    - target_os == 'fedora'

- name: Ensure Obsidian repository is configured (Fedora)
  ansible.builtin.yum_repository:
    name: "{{ obsidian_repo_name }}"
    description: "{{ obsidian_repo_description }}"
    baseurl: "{{ obsidian_repo_baseurl }}"
    enabled: true
    gpgcheck: true
    gpgkey: "{{ obsidian_repo_gpgkey }}"
  when:
    - install_obsidian | default(false) | bool
    - target_os == 'fedora'

- name: Install Obsidian via package manager
  ansible.builtin.package:
    name: "{{ obsidian_package_name }}"
    state: present
    use: "{{ pkg_mgr }}"
  when: install_obsidian | default(false) | bool

- name: Remove legacy Obsidian Flatpak launcher
  ansible.builtin.file:
    path: /usr/local/bin/obsidian
    state: absent
  when: install_obsidian | default(false) | bool

- name: Ensure ChatGPT Desktop directory exists
  ansible.builtin.file:
    path: "{{ chatgpt_desktop_appimage_dir }}"
    state: directory
    mode: '0755'
  when: install_chatgpt_desktop | default(false) | bool

- name: Download ChatGPT Desktop AppImage
  ansible.builtin.get_url:
    url: "{{ chatgpt_desktop_appimage_url }}"
    dest: "{{ chatgpt_desktop_appimage_path }}"
    mode: '0755'
  when: install_chatgpt_desktop | default(false) | bool

- name: Ensure chatgpt-desktop launcher script is present
  ansible.builtin.copy:
    dest: /usr/local/bin/chatgpt-desktop
    mode: '0755'
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash
      exec "{{ chatgpt_desktop_appimage_path }}" "$@"
  when: install_chatgpt_desktop | default(false) | bool

- name: Install Mattermost via Flatpak
  community.general.flatpak:
    name: "{{ mattermost_flatpak_id }}"
    state: present
  when: install_mattermost | default(false) | bool

- name: Ensure mattermost launcher script is present
  ansible.builtin.copy:
    dest: /usr/local/bin/mattermost
    mode: '0755'
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash
      exec flatpak run {{ mattermost_flatpak_id }} "$@"
  when: install_mattermost | default(false) | bool

- name: Ensure dependency for brave installer is present
  ansible.builtin.package:
    name: "{{ brave_dependency_packages }}"
    state: present
    use: "{{ pkg_mgr }}"

#- name: Install Brave
#  ansible.builtin.yum:
#    name: brave-browser
#    state: present

- name: Import install Brave browser role
  ansible.builtin.import_role:
    name: staticdev.brave
  when: install_brave | bool and target_os in ['debian', 'ubuntu']

- name: Install Blender
  ansible.builtin.package:
    name: "{{ blender_package }}"
    state: present
    use: "{{ pkg_mgr }}"

- name: Install Postman dependencies
  ansible.builtin.package:
    name: "{{ postman_dependency_packages }}"
    state: present
    use: "{{ pkg_mgr }}"

- name: Download Postman
  ansible.builtin.get_url:
    url: https://dl.pstmn.io/download/latest/linux_64
    dest: /tmp/postman.tar.gz
    mode: '0644'

- name: Ensure Postman installation directory exists
  ansible.builtin.file:
    path: /opt/postman
    state: directory
    mode: '0755'

- name: Install Postman
  ansible.builtin.unarchive:
    src: /tmp/postman.tar.gz
    dest: /opt/postman

- name: Add Postman to path... TODO
  ansible.builtin.debug:
    msg: "TODO: Add Postman to path"
